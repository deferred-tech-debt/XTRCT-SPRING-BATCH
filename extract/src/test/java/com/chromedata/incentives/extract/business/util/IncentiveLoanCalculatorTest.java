package com.chromedata.incentives.extract.business.util;import org.junit.Before;import org.junit.Test;import org.springframework.context.MessageSource;import java.math.BigDecimal;import java.text.NumberFormat;import static org.assertj.core.api.Assertions.assertThat;import static org.mockito.Mockito.mock;public class IncentiveLoanCalculatorTest {    IncentiveLoanCalculator sut;    @Before    public void setUp() throws Exception {        sut = new IncentiveLoanCalculator(mock(MessageSource.class));    }    @Test    public void testCalculateMonthlyLoanPayment1() {        NumberFormat fmtCurrency = NumberFormat.getCurrencyInstance();        BigDecimal amount = BigDecimal.valueOf(1000);        BigDecimal apr = BigDecimal.valueOf(3.9);        int term = 36;        assertThat(fmtCurrency.format(sut.calculateMonthlyLoanPayment(amount, apr, term))).isEqualTo("$29.48");    }    @Test    public void testCalculateMonthlyLoanPayment2() {        NumberFormat fmtCurrency = NumberFormat.getCurrencyInstance();        BigDecimal amount = BigDecimal.valueOf(30000);        BigDecimal apr = BigDecimal.valueOf(3.9);        int term = 36;        assertThat(fmtCurrency.format(sut.calculateMonthlyLoanPayment(amount, apr, term))).isEqualTo("$884.39");    }    @Test    public void testCalculateMonthlyLoanPayment3() {        NumberFormat fmtCurrency = NumberFormat.getCurrencyInstance();        BigDecimal amount = BigDecimal.valueOf(250000);        BigDecimal apr = BigDecimal.valueOf(5);        int term = 360;        assertThat(fmtCurrency.format(sut.calculateMonthlyLoanPayment(amount, apr, term))).isEqualTo("$1,342.05");    }    @Test    public void testCalculateMonthlyLoanPayment4() {        NumberFormat fmtCurrency = NumberFormat.getCurrencyInstance();        BigDecimal amount = BigDecimal.valueOf(0);        BigDecimal apr = BigDecimal.valueOf(0.9);        int term = 66;        assertThat(fmtCurrency.format(sut.calculateMonthlyLoanPayment(amount, apr, term))).isEqualTo("$0.00");    }    @Test    public void testCalculateMonthlyLoanPayment5() {        NumberFormat fmtCurrency = NumberFormat.getCurrencyInstance();        BigDecimal amount = BigDecimal.valueOf(12000);        BigDecimal apr = BigDecimal.valueOf(0.0);        int term = 12;        assertThat(fmtCurrency.format(sut.calculateMonthlyLoanPayment(amount, apr, term))).isEqualTo("$1,000.00");    }    @Test    public void testCalculateMonthlyLoanPayment6() {        NumberFormat fmtCurrency = NumberFormat.getCurrencyInstance();        BigDecimal amount = BigDecimal.valueOf(27000);        BigDecimal apr = BigDecimal.valueOf(1.8);        int term = 0;        assertThat(fmtCurrency.format(sut.calculateMonthlyLoanPayment(amount, apr, term))).isEqualTo("$27,000.00");    }}